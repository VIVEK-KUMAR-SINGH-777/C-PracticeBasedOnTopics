class TestTryCatch
{
    static int GetInt(int[] array, int index)
    {
        try
        {
            return array[index];
        }
        catch (System.IndexOutOfRangeException e)  // CS0168
        {
            System.Console.WriteLine(e.Message);
            // Set IndexOutOfRangeException to the new exception's InnerException.
            throw new System.ArgumentOutOfRangeException("index parameter is out of range.", e);
        }
    }
}
=========================================================================================================================
using System;
using System.IO;

public class ExceptionExample
{
    static void Main()
    {
        try
        {
            using (var sw = new StreamWriter(@"C:\test\test.txt"))
            {
                sw.WriteLine("Hello");
            }
        }
        
        catch (DirectoryNotFoundException ex)
        {
            Console.WriteLine(ex);
        }
        catch (FileNotFoundException ex)
        {
            Console.WriteLine(ex);
        }
        // Put the least specific exception last.
        catch (IOException ex)
        {
            Console.WriteLine(ex);
        }

        Console.WriteLine("Done");
    }
}
=========================================================================================================================
using System;  
public class InvalidAgeException : Exception  
{  
    public InvalidAgeException(String message)  
        : base(message)  
    {  
  
    }  
}  
public class TestUserDefinedException  
{  
    static void validate(int age)  
    {  
        if (age < 18)  
        {  
            throw new InvalidAgeException("Sorry, Age must be greater than 18");  
        }  
    }  
    public static void Main(string[] args)  
    {  
        try  
        {  
            validate(12);  
        }  
        catch (InvalidAgeException e) { Console.WriteLine(e); }  
        Console.WriteLine("Rest of the code");  
    }  
    
    -----------------------------------------------C# Checked and Unchecked------------------------------------
    C# provides checked and unchecked keyword to handle integral type exceptions. Checked and unchecked keywords specify checked context and
    unchecked context respectively. In checked context, arithmetic overflow raises an exception whereas, in an unchecked context, 
    arithmetic overflow is ignored and result is truncated. 
    
    C# Checked 
    
